(define (createtorus name small_radius big_radius)

  (define (getname) name)
  (define (getsmall_radius) small_radius)
  (define (getbig_radius) big_radius)
  (define (getpi) 3.141592653589793)
  (define (getarea) 
    (* 4 (* (getpi) (getpi)) (getbig_radius) (getsmall_radius))
  )
  (define (getvolume)
    (* 2 (* (getpi) (getpi)) (* (getsmall_radius) (getsmall_radius)) (getbig_radius))
  )
  (define (comparisonOfTypes op value)
    (cond 
      ((string=? op "==")
        (if (string=? "torus" value) #t #f)
      )
      ((string=? op "!=")
        (if (not (string=? "torus" value)) #t #f)
      )
      ((string=? op ">=")
        (if (string>=? "torus" value) #t #f)
      )
      ((string=? op "<=")
        (if (string<=? "torus" value) #t #f)
      )
      ((string=? op ">")
        (if (string>? "torus" value) #t #f)
      )
      ((string=? op "<")
        (if (string<? "torus" value) #t #f)
      )
    )
  )
  ; value1 and value2 will either be two areas or two volumes being compared.
  (define (comparisonOfValues op value1 value2)
    (cond
      ((string=? op "==")
        (if (= value1 value2) #t #f)
      )
      ((string=? op "!=")
        (if (not (= value1 value2)) #t #f)
      )
      ((string=? op ">=")
        (if (>= value1 value2) #t #f)
      )
      ((string=? op "<=")
        (if (<= value1 value2) #t #f)
      )
      ((string=? op ">")
        (if (> value1 value2) #t #f)
      )
      ((string=? op "<")
        (if (< value1 value2) #t #f)
      )
    )
  )
  (define (test conditions) 
    (define result #t)
    (do ((conditions_list conditions (cdr (cdr (cdr conditions_list)))))
        ((null? conditions_list))
      (let* ((name (car conditions_list))
            (op (cadr conditions_list))
            (value (caddr conditions_list))
            (areaToBeCompared 0)
            (volumeToBeCompared 0))
        (cond 
          ((string=? name "type")
            (if (not (comparisonOfTypes op value))
              (set! result #f)
            )
          )
          ((string=? name "area")
            (set! areaToBeCompared value)
            (if (not (comparisonOfValues op (getarea) areaToBeCompared))
              (set! result #f)
            )
          )
          ((string=? name "volume")
            (set! volumeToBeCompared value)
            (if (not (comparisonOfValues op (getvolume) volumeToBeCompared))
              (set! result #f)
            )
          )
        )
      )
    )
    result
  )
  (define (getinfo)
    (map display (list "Torus: " (getname) ", Small Radius=" (getsmall_radius) ", Big Radius=" (getbig_radius) "\n"
                       "        Surface Area: " (getarea) ", Volume: " (getvolume) "\n"))
  )
  (define (dispatch message . arguments) 
    (cond   ((eq? message 'test) test)
            ((eq? message 'getinfo) getinfo)
            ((eq? message 'getarea) getarea)
            ((eq? message 'getvolume) getvolume)
            (else (error "Message not understood"))
    )
  )
  dispatch
)